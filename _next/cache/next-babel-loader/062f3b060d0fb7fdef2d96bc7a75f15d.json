{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport fetch from 'isomorphic-unfetch'; // 200 成功\n// 100001 失败\n// 100002 超时\n\nconst TIME_OUT = 5000;\n\nconst timeOut = () => {\n  return new _Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        code: 100002,\n        msg: '请求超时',\n        result: null\n      });\n    }, TIME_OUT);\n  });\n};\n\nconst fetchData = (url, config) => {\n  return new _Promise(async (resolve, reject) => {\n    try {\n      const res = await fetch(url, config);\n      const json = await res.json();\n      resolve(json);\n    } catch (err) {\n      reject(err);\n    }\n  });\n};\n\nconst http = (url, config = {}) => {\n  return _Promise.race([timeOut(), fetchData(url, config)]).then(res => {\n    if (res && res.code && res.code === 200) {\n      return _Promise.resolve(res);\n    }\n\n    return _Promise.reject(res);\n  }).catch(err => {\n    return _Promise.reject(err);\n  });\n};\n\nconst httpGet = async (url, config = {}) => {\n  return await http(url, _Object$assign({}, config, {\n    method: 'get'\n  }));\n};\n\nconst httpPost = async (url, config = {}) => {\n  return await http(url, _Object$assign({}, config, {\n    method: 'post'\n  }));\n};\n\nconst httpPut = async (url, config = {}) => {\n  return await http(url, _Object$assign({}, config, {\n    method: 'put'\n  }));\n};\n\nconst httpDelete = async (url, config = {}) => {\n  return await http(url, _Object$assign({}, config, {\n    method: 'delete'\n  }));\n};\n\nexport default {\n  get: httpGet,\n  post: httpPost,\n  put: httpPut,\n  delete: httpDelete\n};","map":{"version":3,"sources":["/Users/daiwei/pr/react-website-next/utils/http.ts"],"names":["fetch","TIME_OUT","timeOut","resolve","setTimeout","code","msg","result","fetchData","url","config","reject","res","json","err","http","race","then","catch","httpGet","method","httpPost","httpPut","httpDelete","get","post","put","delete"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB,C,CAEA;AACA;AACA;;AAUA,MAAMC,QAAQ,GAAG,IAAjB;;AAEA,MAAMC,OAAO,GAAG,MAA+B;AAC7C,SAAO,aAAaC,OAAD,IAAa;AAC9BC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,OAAO,CAAC;AACNE,QAAAA,IAAI,EAAE,MADA;AAENC,QAAAA,GAAG,EAAE,MAFC;AAGNC,QAAAA,MAAM,EAAE;AAHF,OAAD,CAAP;AAKD,KANS,EAMPN,QANO,CAAV;AAOD,GARM,CAAP;AASD,CAVD;;AAYA,MAAMO,SAAS,GAAG,CAACC,GAAD,EAAmBC,MAAnB,KAAyF;AACzG,SAAO,aAAY,OAAOP,OAAP,EAAgBQ,MAAhB,KAA2B;AAC5C,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACS,GAAD,EAAMC,MAAN,CAAvB;AACA,YAAMG,IAAmB,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAlC;AACAV,MAAAA,OAAO,CAACU,IAAD,CAAP;AACD,KAJD,CAIE,OAAOC,GAAP,EAAY;AACZH,MAAAA,MAAM,CAACG,GAAD,CAAN;AACD;AACF,GARM,CAAP;AASD,CAVD;;AAYA,MAAMC,IAAI,GAAG,CAACN,GAAD,EAAmBC,MAA+B,GAAG,EAArD,KAA4D;AACvE,SAAO,SAAQM,IAAR,CAAa,CAACd,OAAO,EAAR,EAAYM,SAAS,CAACC,GAAD,EAAMC,MAAN,CAArB,CAAb,EAAkDO,IAAlD,CAAwDL,GAAD,IAAS;AACrE,QAAIA,GAAG,IAAIA,GAAG,CAACP,IAAX,IAAmBO,GAAG,CAACP,IAAJ,KAAa,GAApC,EAAyC;AACvC,aAAO,SAAQF,OAAR,CAAgBS,GAAhB,CAAP;AACD;;AAED,WAAO,SAAQD,MAAR,CAAeC,GAAf,CAAP;AACD,GANM,EAMJM,KANI,CAMEJ,GAAG,IAAI;AACd,WAAO,SAAQH,MAAR,CAAeG,GAAf,CAAP;AACD,GARM,CAAP;AASD,CAVD;;AAcA,MAAMK,OAAe,GAAG,OAAOV,GAAP,EAAYC,MAAM,GAAG,EAArB,KAA4B;AAClD,SAAO,MAAMK,IAAI,CAACN,GAAD,EAAM,eAAc,EAAd,EAAkBC,MAAlB,EAA0B;AAC/CU,IAAAA,MAAM,EAAE;AADuC,GAA1B,CAAN,CAAjB;AAGD,CAJD;;AAMA,MAAMC,QAAgB,GAAG,OAAOZ,GAAP,EAAYC,MAAM,GAAG,EAArB,KAA4B;AACnD,SAAO,MAAMK,IAAI,CAACN,GAAD,EAAM,eAAc,EAAd,EAAkBC,MAAlB,EAA0B;AAC/CU,IAAAA,MAAM,EAAE;AADuC,GAA1B,CAAN,CAAjB;AAGD,CAJD;;AAMA,MAAME,OAAe,GAAG,OAAOb,GAAP,EAAYC,MAAM,GAAG,EAArB,KAA4B;AAClD,SAAO,MAAMK,IAAI,CAACN,GAAD,EAAM,eAAc,EAAd,EAAkBC,MAAlB,EAA0B;AAC/CU,IAAAA,MAAM,EAAE;AADuC,GAA1B,CAAN,CAAjB;AAGD,CAJD;;AAMA,MAAMG,UAAkB,GAAG,OAAOd,GAAP,EAAYC,MAAM,GAAG,EAArB,KAA4B;AACrD,SAAO,MAAMK,IAAI,CAACN,GAAD,EAAM,eAAc,EAAd,EAAkBC,MAAlB,EAA0B;AAC/CU,IAAAA,MAAM,EAAE;AADuC,GAA1B,CAAN,CAAjB;AAGD,CAJD;;AAMA,eAAe;AACbI,EAAAA,GAAG,EAAEL,OADQ;AAEbM,EAAAA,IAAI,EAAEJ,QAFO;AAGbK,EAAAA,GAAG,EAAEJ,OAHQ;AAIbK,EAAAA,MAAM,EAAEJ;AAJK,CAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\n// 200 成功\n// 100001 失败\n// 100002 超时\n\ntype RES_CODE = 200 | 100001 | 100002\n\ninterface IResInfo<T> {\n  code: RES_CODE,\n  msg: string,\n  result: T\n}\n\nconst TIME_OUT = 5000\n\nconst timeOut = (): Promise<IResInfo<null>> => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        code: 100002,\n        msg: '请求超时',\n        result: null\n      })\n    }, TIME_OUT)\n  })\n}\n\nconst fetchData = (url: RequestInfo, config: RequestInit | undefined): Promise<IResInfo<null | never>>  => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await fetch(url, config)\n      const json: IResInfo<any> = await res.json()\n      resolve(json)\n    } catch (err) {\n      reject(err)\n    }\n  })\n}\n\nconst http = (url: RequestInfo, config: RequestInit | undefined = {}) => {\n  return Promise.race([timeOut(), fetchData(url, config)]).then((res) => {\n    if (res && res.code && res.code === 200) {\n      return Promise.resolve(res)\n    }\n\n    return Promise.reject(res)\n  }).catch(err => {\n    return Promise.reject(err)\n  })\n}\n\ntype HttpFn = (url: RequestInfo, config?: RequestInit | undefined) => Promise<IResInfo<any>>\n\nconst httpGet: HttpFn = async (url, config = {}) => {\n  return await http(url, Object.assign({}, config, {\n    method: 'get'\n  }))\n}\n\nconst httpPost: HttpFn = async (url, config = {}) => {\n  return await http(url, Object.assign({}, config, {\n    method: 'post'\n  }))\n}\n\nconst httpPut: HttpFn = async (url, config = {}) => {\n  return await http(url, Object.assign({}, config, {\n    method: 'put'\n  }))\n}\n\nconst httpDelete: HttpFn = async (url, config = {}) => {\n  return await http(url, Object.assign({}, config, {\n    method: 'delete'\n  }))\n}\n\nexport default {\n  get: httpGet,\n  post: httpPost,\n  put: httpPut,\n  delete: httpDelete\n}\n"]},"metadata":{},"sourceType":"module"}