{"ast":null,"code":"var _jsxFileName = \"/Users/daiwei/pr/react-website-next/components/Music/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useRef } from 'react';\nimport cls from 'classnames';\nimport http from '@utils/req';\nimport { MUSIC_DETAIL, MUSIC_PLAY_DETAIL } from '@constance/api';\nimport './music.less';\nimport loadable from '@loadable/component';\nimport audioFn from '@components/Audio/main';\nconst audioInstance = audioFn({\n  style: 'rect'\n});\nconst Ripple = loadable(() => import('ripple-button'));\n\nconst Music = () => {\n  const {\n    0: tracksLists,\n    1: setTracksLists\n  } = useState([]); // const [playIndex, setPlayIndex] = useState<number>(0)\n\n  const playIndex = useRef(0);\n  const classString = cls('music-sider-wrapper');\n  useEffect(() => {\n    getMusic(2179377798);\n    audioInstance.addEvent('onEnded', checkNext);\n    audioInstance.addEvent('onNext', () => checkNext());\n  }, []);\n\n  const getMusic = async id => {\n    const res = await http.get(`${MUSIC_DETAIL}?id=${id}`);\n    const {\n      playlist: {\n        tracks\n      }\n    } = res.data;\n    setTracksLists(tracks);\n  };\n\n  const checkNext = () => {\n    console.log('playIndex', playIndex); // setPlayIndex(playIndex + 1)\n\n    playIndex.current = playIndex.current + 1;\n    playAudioByIndex(playIndex.current);\n  };\n\n  const playAudioByIndex = async index => {\n    const item = tracksLists[index];\n    const {\n      data: {\n        songs: musicDetail\n      }\n    } = await getMusicDetailById(item.id);\n    const formatDetail = formatMusicLists(musicDetail);\n    console.log('formatDetail', formatDetail);\n    const st = {\n      url: getUrlById(item.id),\n      coverUrl: clipImage(formatDetail[0].album.picUrl),\n      name: item.name,\n      disc: formatMusicArtists(formatDetail[0].artists)\n    };\n    audioInstance && audioInstance.cut(st);\n  };\n\n  const checkMusic = async index => {\n    // item: MusicGroupList\n    playIndex.current = index;\n  };\n\n  const clipImage = (src, w = 120, h) => {\n    return `${src}?param=${w}y${h ? h : w}`;\n  };\n\n  const formatMusicLists = lists => {\n    console.log('lists', lists);\n    return lists.map(item => {\n      item.album = item.al;\n      item.artists = item.ar;\n      item.duration = item.dt;\n      return item;\n    });\n  };\n\n  const getMusicDetailById = async id => {\n    const data = await http.get(`${MUSIC_PLAY_DETAIL}?ids=${id}`);\n    return data;\n  };\n\n  const formatMusicArtists = artists => {\n    return artists.map(artist => artist.name).join(', ');\n  };\n\n  const getUrlById = id => {\n    return `//music.163.com/song/media/outer/url?id=${id}.mp3`;\n  };\n\n  return __jsx(\"div\", {\n    className: classString,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: `${classString}-title`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"\\u97F3\\u4E50\"), __jsx(\"div\", {\n    className: `${classString}-content`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, tracksLists && tracksLists.map((item, index) => __jsx(Ripple, {\n    key: index,\n    color: \"rgba(99, 99, 99, 0.3)\",\n    onClick: checkMusic.bind(null, index),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, item.name)))));\n};\n\nexport default Music;","map":{"version":3,"sources":["/Users/daiwei/pr/react-website-next/components/Music/index.tsx"],"names":["React","useEffect","useState","useRef","cls","http","MUSIC_DETAIL","MUSIC_PLAY_DETAIL","loadable","audioFn","audioInstance","style","Ripple","Music","tracksLists","setTracksLists","playIndex","classString","getMusic","addEvent","checkNext","id","res","get","playlist","tracks","data","console","log","current","playAudioByIndex","index","item","songs","musicDetail","getMusicDetailById","formatDetail","formatMusicLists","st","url","getUrlById","coverUrl","clipImage","album","picUrl","name","disc","formatMusicArtists","artists","cut","checkMusic","src","w","h","lists","map","al","ar","duration","dt","artist","join","bind"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react'\nimport cls from 'classnames'\nimport http from '@utils/req'\nimport { MUSIC_DETAIL, MUSIC_PLAY_DETAIL } from '@constance/api'\nimport './music.less'\nimport loadable from '@loadable/component'\nimport {\n  artists, MusicGroupList\n} from './types'\nimport { IDAudio } from '../Audio'\nimport audioFn from '@components/Audio/main'\nconst audioInstance = audioFn({\n  style: 'rect'\n})\n\nconst Ripple = loadable(() => import('ripple-button'))\n\nconst Music = () => {\n  const [tracksLists, setTracksLists] = useState<any>([])\n  // const [playIndex, setPlayIndex] = useState<number>(0)\n  const playIndex = useRef<number>(0)\n  const classString = cls('music-sider-wrapper')\n\n  useEffect(() => {\n    getMusic(2179377798)\n    audioInstance.addEvent('onEnded', checkNext)\n    audioInstance.addEvent('onNext', () => checkNext())\n  }, [])\n\n  const getMusic = async (id: number) => {\n    const res = await http.get(`${MUSIC_DETAIL}?id=${id}`)\n    const { playlist: { tracks } } = res.data\n    setTracksLists(tracks)\n  }\n\n  const checkNext = () => {\n    console.log('playIndex', playIndex)\n    // setPlayIndex(playIndex + 1)\n    playIndex.current = playIndex.current + 1\n    playAudioByIndex(playIndex.current)\n  }\n\n  const playAudioByIndex = async (index: number) => {\n    const item = tracksLists[index]\n    const { data: { songs : musicDetail } } = await getMusicDetailById(item.id)\n    const formatDetail: any = formatMusicLists(musicDetail)\n    console.log('formatDetail', formatDetail)\n    const st = {\n      url: getUrlById(item.id),\n      coverUrl: clipImage(formatDetail[0].album.picUrl),\n      name: item.name,\n      disc: formatMusicArtists(formatDetail[0].artists)\n    }\n    audioInstance && audioInstance.cut(st)\n  }\n\n  const checkMusic = async (index: number) => {\n    // item: MusicGroupList\n    playIndex.current = index\n  }\n\n  const clipImage = (src: string, w: number = 120, h?: number): string => {\n    return `${src}?param=${w}y${h ? h : w}`\n  }\n\n  const formatMusicLists = (lists: any[]) => {\n    console.log('lists', lists)\n    return lists.map((item: any) => {\n      item.album = item.al\n      item.artists = item.ar\n      item.duration = item.dt\n      return item\n    })\n  }\n\n  const getMusicDetailById = async (id: number) => {\n    const data = await http.get(`${MUSIC_PLAY_DETAIL}?ids=${id}`) as any\n    return data\n  }\n\n  const formatMusicArtists = (artists: artists) => {\n    return artists.map((artist) => artist.name).join(', ')\n  }\n\n  const getUrlById = (id: number) => {\n    return `//music.163.com/song/media/outer/url?id=${id}.mp3`\n  }  \n\n  return (\n    <div className={classString}>\n      <p className={`${classString}-title`}>音乐</p>\n      <div className={`${classString}-content`}>\n        {\n          tracksLists && tracksLists.map((item: MusicGroupList, index: number) => (\n            <Ripple key={index}\n                    color='rgba(99, 99, 99, 0.3)'\n                    onClick={checkMusic.bind(null, index)}>\n              <li>{item.name}</li>\n            </Ripple>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Music\n"]},"metadata":{},"sourceType":"module"}