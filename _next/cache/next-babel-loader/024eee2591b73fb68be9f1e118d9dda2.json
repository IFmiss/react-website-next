{"ast":null,"code":"var _jsxFileName = \"/Users/daiwei/pr/react-website-next/components/Music/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport cls from 'classnames';\nimport http from '@utils/req';\nimport { MUSIC_DETAIL, MUSIC_PLAY_DETAIL } from '@constance/api';\nimport './music.less';\nimport loadable from '@loadable/component';\n// import dynamic from 'next/dynamic';\n// const audioInstance: React.ComponentType<any> = dynamic(() => import('@components/Audio/main'), {\n//   ssr: false\n// })\n// import Dauido from '@components/Audio/main'\nconst Ripple = loadable(() => import('ripple-button'));\n\nconst Music = () => {\n  const {\n    0: tracksLists,\n    1: setTracksLists\n  } = useState([]);\n  const classString = cls('music-sider-wrapper');\n  useEffect(() => {\n    getMusic(2179377798); // const audioInstance = require('@components/Audio/main').default\n    // console.log('audioInstance', audioInstance)\n    // audioRef.current = audioInstance({\n    //   style: 'rect',\n    //   type: 'handle'\n    // })\n    // console.log('Dauido', Dauido)\n    // const a = Dauido({})\n  }, []);\n\n  const getMusic = async id => {\n    const res = await http.get(`${MUSIC_DETAIL}?id=${id}`);\n    const {\n      playlist: {\n        tracks\n      }\n    } = res.data;\n    setTracksLists(tracks);\n  };\n\n  const checkMusic = async item => {\n    const {\n      data: {\n        songs: musicDetail\n      }\n    } = await getMusicDetailById(item.id);\n    console.log('songs', musicDetail);\n    const formatDetail = formatMusicLists(musicDetail);\n    console.log('formatDetail', formatDetail);\n    const st = {\n      url: getUrlById(item.id),\n      coverUrl: clipImage(formatDetail[0].album.picUrl),\n      name: item.name,\n      disc: formatMusicArtists(formatDetail[0].artists)\n    }; // audioRef.current.cut(st)\n    // const a = Dauido({})\n    // a.cut(st)\n  };\n\n  const clipImage = (src, w = 120, h) => {\n    return `${src}?param=${w}y${h ? h : w}`;\n  };\n\n  const formatMusicLists = lists => {\n    console.log('lists', lists);\n    return lists.map(item => {\n      item.album = item.al;\n      item.artists = item.ar;\n      item.duration = item.dt;\n      return item;\n    });\n  };\n\n  const getMusicDetailById = async id => {\n    const data = await http.get(`${MUSIC_PLAY_DETAIL}?ids=${id}`);\n    return data;\n  };\n\n  const formatMusicArtists = artists => {\n    return artists.map(artist => artist.name).join(', ');\n  };\n\n  const getUrlById = id => {\n    return `//music.163.com/song/media/outer/url?id=${id}.mp3`;\n  };\n\n  return __jsx(\"div\", {\n    className: classString,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: `${classString}-title`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"\\u97F3\\u4E50\"), __jsx(\"div\", {\n    className: `${classString}-content`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, tracksLists && tracksLists.map((item, index) => __jsx(Ripple, {\n    key: index,\n    color: \"rgba(99, 99, 99, 0.3)\",\n    onClick: checkMusic.bind(null, item),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, __jsx(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, item.name)))));\n};\n\nexport default Music;","map":{"version":3,"sources":["/Users/daiwei/pr/react-website-next/components/Music/index.tsx"],"names":["React","useEffect","useState","cls","http","MUSIC_DETAIL","MUSIC_PLAY_DETAIL","loadable","Ripple","Music","tracksLists","setTracksLists","classString","getMusic","id","res","get","playlist","tracks","data","checkMusic","item","songs","musicDetail","getMusicDetailById","console","log","formatDetail","formatMusicLists","st","url","getUrlById","coverUrl","clipImage","album","picUrl","name","disc","formatMusicArtists","artists","src","w","h","lists","map","al","ar","duration","dt","artist","join","index","bind"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport cls from 'classnames'\nimport http from '@utils/req'\nimport { MUSIC_DETAIL, MUSIC_PLAY_DETAIL } from '@constance/api'\nimport './music.less'\nimport loadable from '@loadable/component'\nimport {\n  artists, MusicGroupList\n} from './types'\n// import dynamic from 'next/dynamic';\n// const audioInstance: React.ComponentType<any> = dynamic(() => import('@components/Audio/main'), {\n//   ssr: false\n// })\n// import Dauido from '@components/Audio/main'\n\nconst Ripple = loadable(() => import('ripple-button'))\n\nconst Music = () => {\n  const [tracksLists, setTracksLists] = useState<any>([])\n  const classString = cls('music-sider-wrapper')\n\n  useEffect(() => {\n    getMusic(2179377798)\n\n    // const audioInstance = require('@components/Audio/main').default\n    // console.log('audioInstance', audioInstance)\n    // audioRef.current = audioInstance({\n    //   style: 'rect',\n    //   type: 'handle'\n    // })\n    // console.log('Dauido', Dauido)\n    // const a = Dauido({})\n  }, [])\n\n  const getMusic = async (id: number) => {\n    const res = await http.get(`${MUSIC_DETAIL}?id=${id}`)\n    const { playlist: { tracks } } = res.data\n    setTracksLists(tracks)\n  }\n\n  const checkMusic = async (item: MusicGroupList) => {\n    const { data: { songs : musicDetail } } = await getMusicDetailById(item.id)\n    console.log('songs', musicDetail)\n    const formatDetail: any = formatMusicLists(musicDetail)\n    console.log('formatDetail', formatDetail)\n    const st = {\n      url: getUrlById(item.id),\n      coverUrl: clipImage(formatDetail[0].album.picUrl),\n      name: item.name,\n      disc: formatMusicArtists(formatDetail[0].artists)\n    }\n    // audioRef.current.cut(st)\n    // const a = Dauido({})\n    // a.cut(st)\n  }\n\n  const clipImage = (src: string, w: number = 120, h?: number): string => {\n    return `${src}?param=${w}y${h ? h : w}`\n  }\n\n  const formatMusicLists = (lists: any[]) => {\n    console.log('lists', lists)\n    return lists.map((item: any) => {\n      item.album = item.al\n      item.artists = item.ar\n      item.duration = item.dt\n      return item\n    })\n  }\n\n  const getMusicDetailById = async (id: number) => {\n    const data = await http.get(`${MUSIC_PLAY_DETAIL}?ids=${id}`) as any\n    return data\n  }\n\n  const formatMusicArtists = (artists: artists) => {\n    return artists.map((artist) => artist.name).join(', ')\n  }\n\n  const getUrlById = (id: number) => {\n    return `//music.163.com/song/media/outer/url?id=${id}.mp3`\n  }  \n\n  return (\n    <div className={classString}>\n      <p className={`${classString}-title`}>音乐</p>\n      <div className={`${classString}-content`}>\n        {\n          tracksLists && tracksLists.map((item: MusicGroupList, index: number) => (\n            <Ripple key={index}\n                    color='rgba(99, 99, 99, 0.3)'\n                    onClick={checkMusic.bind(null, item)}>\n              <li>{item.name}</li>\n            </Ripple>\n          ))\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Music\n"]},"metadata":{},"sourceType":"module"}