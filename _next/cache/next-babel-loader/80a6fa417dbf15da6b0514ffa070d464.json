{"ast":null,"code":"/**\n * @description 日期格式化 可转换成自己想要的格式\n * @param { String } fmt 格式模板 'yyyy-MM-dd hh:mm:ss'\n * @param { Date } date 日期内容  如 当前日期 new Date()\n * @return { String } '2018-08-15 01:46:22'\n * @example\n * formatDate(`yyyy-MM-dd hh:mm:ss`, new Date())\n * @example\n * formatDate(`yyyy-MM-dd`, new Date())\n */\nexport function formatDate(fmt) {\n  var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  var newDate = new Date(date);\n  var o = {\n    'M+': newDate.getMonth() + 1,\n    'd+': newDate.getDate(),\n    'h+': newDate.getHours(),\n    'm+': newDate.getMinutes(),\n    's+': newDate.getSeconds(),\n    'q+': ~~((newDate.getMonth() + 3) / 3),\n    'S': newDate.getMilliseconds() // 毫秒\n\n  };\n\n  if (/(y+)/.test(fmt)) {\n    fmt = fmt.replace(RegExp.$1, (newDate.getFullYear() + '').substr(4 - RegExp.$1.length));\n  }\n\n  for (var k in o) {\n    if (new RegExp('(' + k + ')').test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));\n    }\n  }\n\n  return fmt;\n}\n/**\n * @description 判断元素是否存在某个class类\n * @param { HTMLElement } el dom元素\n * @param { String } className class名称\n * @example\n * hasClass(document.body, 'd-utils')\n */\n\nexport function hasClass(el, className) {\n  return el.classList.contains(className);\n}\n/**\n * @description 判断元素是否存在某个class类\n * @param { HTMLElement } el dom元素\n * @param { String } className class名称\n * @example\n * hasClass(document.body, 'd-utils')\n */\n\nexport function addClass(el, className) {\n  if (Array.isArray(className)) {\n    className.forEach(function (item) {\n      if (!hasClass(el, item)) {\n        el.classList.add(item);\n      }\n    });\n    return;\n  }\n\n  if (!hasClass(el, className)) {\n    el.classList.add(className);\n  }\n}\n/**\n * @description 元素删除class\n * @param { HTMLElement } el dom元素\n * @param { (String | Array) } className class名称，可以是多个\n * @example\n * removeClass(document.body, 'd-utils')\n */\n\nexport function removeClass(el, className) {\n  if (Array.isArray(className)) {\n    className.forEach(function (item) {\n      if (hasClass(el, item)) {\n        el.classList.remove(item);\n      }\n    });\n    return;\n  }\n\n  if (hasClass(el, className)) {\n    el.classList.remove(className);\n  }\n}\n/**\n * @description 设置Cookie\n * @param { String } name cookie名称\n * @param { String } value cooke的值\n * @param { Number } exp 过期时间 默认2小时 单位毫秒\n * @example\n * // 设置name为test的值为12345，设置过期时间为1小时\n * setCookie('test', '12345', 60 * 60 * 1000)\n */\n\nexport function setCookie(name, value) {\n  var exp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60 * 60 * 2 * 1000;\n  var date = new Date();\n  date.setTime(date.getTime() + exp);\n  document.cookie = \"\".concat(name, \"=\").concat(escape(value), \";expires=\").concat(date.toUTCString());\n}\n/**\n * @description 获取Cookie\n * @param { String } name cookie名称\n * @returns { (Array | Null) } 返回数据\n * @example\n * getCookie('test')\n */\n\nexport function getCookie(name) {\n  if (name) {\n    var reg = new RegExp(\"(^| )\".concat(name, \"=([^;]*)(;|$)\"));\n    var arr = document.cookie.match(reg);\n    return arr && arr[2] ? arr[2] : null;\n  }\n\n  var getAllCookies = [];\n\n  if (document.cookie.length) {\n    var arrCookie = document.cookie.split('; ');\n\n    for (var k in arrCookie) {\n      getAllCookies.push({\n        name: \"\".concat(unescape(arrCookie[k].split('=')[0])),\n        value: \"\".concat(unescape(arrCookie[k].split('=')[1]))\n      });\n    }\n\n    return getAllCookies;\n  } else {\n    return null;\n  }\n}\n/**\n * @description 删除Cookie\n * @param { String } name cookie名称 如果不传参数则设置所有cookie过期\n * @returns { Array } 是一个伪数组\n * @example\n * removeCookie('test')\n */\n\nexport function removeCookie(name) {\n  var date = new Date();\n  date.setTime(date.getTime() - 1);\n\n  if (name) {\n    var cookieInfo = getCookie(name);\n\n    if (cookieInfo !== null) {\n      document.cookie = \"\".concat(name, \"=\").concat(cookieInfo, \";expires=\").concat(date.toUTCString());\n    }\n\n    return;\n  }\n\n  var allCookies = getCookie();\n\n  for (var k in allCookies) {\n    document.cookie = \"\".concat(allCookies[k].name, \"=\").concat(allCookies[k].value, \";expires=\").concat(date.toUTCString());\n  }\n}","map":{"version":3,"sources":["/Users/daiwei/pr/react-website-next/utils/utils.ts"],"names":["formatDate","fmt","date","Date","newDate","o","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","test","replace","RegExp","$1","getFullYear","substr","length","k","hasClass","el","className","classList","contains","addClass","Array","isArray","forEach","item","add","removeClass","remove","setCookie","name","value","exp","setTime","getTime","document","cookie","escape","toUTCString","getCookie","reg","arr","match","getAllCookies","arrCookie","split","push","unescape","removeCookie","cookieInfo","allCookies"],"mappings":"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","sourcesContent":["/**\n * @description 日期格式化 可转换成自己想要的格式\n * @param { String } fmt 格式模板 'yyyy-MM-dd hh:mm:ss'\n * @param { Date } date 日期内容  如 当前日期 new Date()\n * @return { String } '2018-08-15 01:46:22'\n * @example\n * formatDate(`yyyy-MM-dd hh:mm:ss`, new Date())\n * @example\n * formatDate(`yyyy-MM-dd`, new Date())\n */\nexport function formatDate(fmt: string, date = new Date()) {\n  const newDate = new Date(date);\n  let o: any = {\n      'M+': newDate.getMonth() + 1,\n      'd+': newDate.getDate(),\n      'h+': newDate.getHours(),\n      'm+': newDate.getMinutes(),\n      's+': newDate.getSeconds(),\n      'q+': ~~((newDate.getMonth() + 3) / 3),\n      'S': newDate.getMilliseconds() // 毫秒\n  };\n  if (/(y+)/.test(fmt)) {\n      fmt = fmt.replace(RegExp.$1, (newDate.getFullYear() + '').substr(4 - RegExp.$1.length));\n  }\n  for (let k in o) {\n      if (new RegExp('(' + k + ')').test(fmt)) {\n          fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)));\n      }\n  }\n  return fmt;\n}\n\n/**\n * @description 判断元素是否存在某个class类\n * @param { HTMLElement } el dom元素\n * @param { String } className class名称\n * @example\n * hasClass(document.body, 'd-utils')\n */\nexport function hasClass (el: HTMLElement | Element, className: string): boolean {\n    return el.classList.contains(className)\n  }\n  \n/**\n * @description 判断元素是否存在某个class类\n * @param { HTMLElement } el dom元素\n * @param { String } className class名称\n * @example\n * hasClass(document.body, 'd-utils')\n */\nexport function addClass (el: Element | HTMLElement, className: string | string[]): void {\n  if (Array.isArray(className)) {\n    className.forEach((item: string) => {\n      if (!hasClass(el, item)) {\n        el.classList.add(item)\n      }\n    })\n    return\n  }\n  if (!hasClass(el, className)) {\n    el.classList.add(className)\n  }\n}\n\n/**\n * @description 元素删除class\n * @param { HTMLElement } el dom元素\n * @param { (String | Array) } className class名称，可以是多个\n * @example\n * removeClass(document.body, 'd-utils')\n */\nexport function removeClass (el: Element | HTMLElement, className: string | string[]): void {\n  if (Array.isArray(className)) {\n    className.forEach((item: string) => {\n      if (hasClass(el, item)) {\n        el.classList.remove(item)\n      }\n    })\n    return\n  }\n  if (hasClass(el, className)) {\n    el.classList.remove(className)\n  }\n}\n\n/**\n * @description 设置Cookie\n * @param { String } name cookie名称\n * @param { String } value cooke的值\n * @param { Number } exp 过期时间 默认2小时 单位毫秒\n * @example\n * // 设置name为test的值为12345，设置过期时间为1小时\n * setCookie('test', '12345', 60 * 60 * 1000)\n */\nexport function setCookie (name: string, value: string, exp: number = 60 * 60 * 2 * 1000): void {\n  const date = new Date()\n  date.setTime(date.getTime() + exp)\n  document.cookie = `${name}=${escape(value)};expires=${date.toUTCString()}`\n}\n\n/**\n * @description 获取Cookie\n * @param { String } name cookie名称\n * @returns { (Array | Null) } 返回数据\n * @example\n * getCookie('test')\n */\nexport function getCookie (name?: string): string | any {\n  if (name) {\n    const reg = new RegExp(`(^| )${name}=([^;]*)(;|$)`)\n    const arr = document.cookie.match(reg)\n    return arr&&arr[2] ? arr[2] : null\n  }\n  const getAllCookies = []\n  if (document.cookie.length) {\n    const arrCookie = document\n                      .cookie\n                      .split('; ')\n    for (let k in arrCookie) {\n      getAllCookies.push({\n        name: `${unescape(arrCookie[k].split('=')[0])}`,\n        value: `${unescape(arrCookie[k].split('=')[1])}`\n      })\n    }\n    return getAllCookies\n  } else {\n    return null\n  }\n}\n\n/**\n * @description 删除Cookie\n * @param { String } name cookie名称 如果不传参数则设置所有cookie过期\n * @returns { Array } 是一个伪数组\n * @example\n * removeCookie('test')\n */\nexport function removeCookie (name: string): any {\n  const date = new Date()\n  date.setTime(date.getTime() - 1)\n  if (name) {\n    const cookieInfo = getCookie(name)\n    if (cookieInfo !== null) {\n      document.cookie = `${name}=${cookieInfo};expires=${date.toUTCString()}`\n    }\n    return\n  }\n  const allCookies = getCookie()\n  for (let k in allCookies) {\n    document.cookie = `${allCookies[k].name}=${allCookies[k].value};expires=${date.toUTCString()}`\n  }\n}\n"]},"metadata":{},"sourceType":"module"}